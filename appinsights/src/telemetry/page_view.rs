use chrono::{DateTime, SecondsFormat, Utc};
use http::Uri;

use crate::context::TelemetryContext;
use crate::contracts::*;
use crate::telemetry::{ContextTags, Measurements, Properties, Telemetry};
use crate::time::{self, Duration};
use crate::uuid::Uuid;

/// Represents generic actions on a page like a button click.
///
/// # Examples
/// ```rust, no_run
/// # use appinsights::TelemetryClient;
/// # let client = TelemetryClient::new("<instrumentation key>".to_string());
/// use appinsights::telemetry::{Telemetry, PageViewTelemetry};
/// use http::Uri;
/// use std::time::Duration;
///
/// // create a telemetry item
/// let mut telemetry = PageViewTelemetry::new(
///     "check github repo page".to_string(),
///     "https://github.com/dmolokanov/appinsights-rs".parse::<Uri>().unwrap(),
/// );
///
/// // attach custom properties, measurements and context tags
/// telemetry.properties_mut().insert("component".to_string(), "data_processor".to_string());
/// telemetry.tags_mut().insert("os_version".to_string(), "linux x86_64".to_string());
/// telemetry.measurements_mut().insert("body_size".to_string(), 115.0);
///
/// // submit telemetry item to server
/// client.track(telemetry);
/// ```
pub struct PageViewTelemetry {
    /// Identifier of a generic action on a page.
    /// It is used to correlate a generic action on a page and telemetry generated by the service.
    id: Option<Uuid>,

    /// Event name.
    name: String,

    /// Request URL with all query string parameters.
    uri: Uri,

    /// Request duration.
    duration: Option<Duration>,

    /// The time stamp when this telemetry was measured.
    timestamp: DateTime<Utc>,

    /// Custom properties.
    properties: Properties,

    /// Telemetry context containing extra, optional tags.
    tags: ContextTags,

    /// Custom measurements.
    measurements: Measurements,
}

impl PageViewTelemetry {
    /// Creates a new page view telemetry item with the specified name and url.
    pub fn new(name: String, uri: Uri) -> Self {
        Self {
            id: Default::default(),
            name,
            uri,
            duration: Default::default(),
            timestamp: time::now(),
            properties: Default::default(),
            tags: Default::default(),
            measurements: Default::default(),
        }
    }

    /// Returns custom measurements to submit with the telemetry item.
    pub fn measurements(&self) -> &Measurements {
        &self.measurements
    }

    /// Returns mutable reference to custom measurements.
    pub fn measurements_mut(&mut self) -> &mut Measurements {
        &mut self.measurements
    }
}

impl Telemetry for PageViewTelemetry {
    /// Returns the time when this telemetry was measured.
    fn timestamp(&self) -> DateTime<Utc> {
        self.timestamp
    }

    /// Returns custom properties to submit with the telemetry item.
    fn properties(&self) -> &Properties {
        &self.properties
    }

    /// Returns mutable reference to custom properties.
    fn properties_mut(&mut self) -> &mut Properties {
        &mut self.properties
    }

    /// Returns context data containing extra, optional tags. Overrides values found on client telemetry context.
    fn tags(&self) -> &ContextTags {
        &self.tags
    }

    /// Returns mutable reference to custom tags.
    fn tags_mut(&mut self) -> &mut ContextTags {
        &mut self.tags
    }
}

impl From<(TelemetryContext, PageViewTelemetry)> for Envelope {
    fn from((context, telemetry): (TelemetryContext, PageViewTelemetry)) -> Self {
        let data = Data::PageViewData({
            let id = telemetry
                .id
                .map(|id| id.to_hyphenated().to_string())
                .unwrap_or_default();
            let mut builder = PageViewDataBuilder::new(telemetry.name, id);
            builder
                .url(telemetry.uri.to_string())
                .properties(Properties::combine(context.properties, telemetry.properties))
                .measurements(telemetry.measurements);

            if let Some(duration) = telemetry.duration {
                builder.duration(duration.to_string());
            }

            builder.build()
        });

        let envelope_name = data.envelope_name(&context.normalized_i_key);
        let timestamp = telemetry.timestamp.to_rfc3339_opts(SecondsFormat::Millis, true);

        EnvelopeBuilder::new(envelope_name, timestamp)
            .data(Base::Data(data))
            .i_key(context.i_key)
            .tags(ContextTags::combine(context.tags, telemetry.tags))
            .build()
    }
}

#[cfg(test)]
mod tests {
    use std::collections::BTreeMap;

    use chrono::TimeZone;

    use super::*;

    #[test]
    fn it_overrides_properties_from_context() {
        time::set(Utc.ymd(2019, 1, 2).and_hms_milli(3, 4, 5, 800));

        let mut context = TelemetryContext::new("instrumentation".into());
        context.properties_mut().insert("test".into(), "ok".into());
        context.properties_mut().insert("no-write".into(), "fail".into());

        let mut telemetry =
            PageViewTelemetry::new("page updated".into(), "https://example.com/main.html".parse().unwrap());
        telemetry.properties_mut().insert("no-write".into(), "ok".into());
        telemetry.measurements_mut().insert("latency".into(), 200.0);

        let envelop = Envelope::from((context, telemetry));

        let expected = EnvelopeBuilder::new(
            "Microsoft.ApplicationInsights.instrumentation.PageView",
            "2019-01-02T03:04:05.800Z",
        )
        .data(Base::Data(Data::PageViewData(
            PageViewDataBuilder::new("page updated", "")
                .url("https://example.com/main.html")
                .properties({
                    let mut properties = BTreeMap::default();
                    properties.insert("test".into(), "ok".into());
                    properties.insert("no-write".into(), "ok".into());
                    properties
                })
                .measurements({
                    let mut measurement = Measurements::default();
                    measurement.insert("latency".into(), 200.0);
                    measurement
                })
                .build(),
        )))
        .i_key("instrumentation")
        .tags(BTreeMap::default())
        .build();

        assert_eq!(envelop, expected)
    }

    #[test]
    fn it_overrides_tags_from_context() {
        time::set(Utc.ymd(2019, 1, 2).and_hms_milli(3, 4, 5, 700));

        let mut context = TelemetryContext::new("instrumentation".into());
        context.tags_mut().insert("test".into(), "ok".into());
        context.tags_mut().insert("no-write".into(), "fail".into());

        let mut telemetry =
            PageViewTelemetry::new("page updated".into(), "https://example.com/main.html".parse().unwrap());
        telemetry.measurements_mut().insert("latency".into(), 200.0);
        telemetry.tags_mut().insert("no-write".into(), "ok".into());

        let envelop = Envelope::from((context, telemetry));

        let expected = EnvelopeBuilder::new(
            "Microsoft.ApplicationInsights.instrumentation.PageView",
            "2019-01-02T03:04:05.700Z",
        )
        .data(Base::Data(Data::PageViewData(
            PageViewDataBuilder::new("page updated", "")
                .url("https://example.com/main.html")
                .properties(Properties::default())
                .measurements({
                    let mut measurement = Measurements::default();
                    measurement.insert("latency".into(), 200.0);
                    measurement
                })
                .build(),
        )))
        .i_key("instrumentation")
        .tags({
            let mut tags = BTreeMap::default();
            tags.insert("test".into(), "ok".into());
            tags.insert("no-write".into(), "ok".into());
            tags
        })
        .build();

        assert_eq!(envelop, expected)
    }
}
